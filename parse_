#include <math.h>
#include <stdio.h>
#include "C:/Keil/Labware/inc/tm4c123gh6pm.h"
#include "stdint.h"
#include "ctype.h "  		/* required for the isalnum function */
#include "string.h"
#include "stdlib.h"	

#define COM_PORT   3		/* Serial device connected to COM 3*/
#define SPACE	  0x20
#define COMMA	  0x2C
#define MAXSIZE    100		/* GPS at most, sends 80 or so chars per message string.  So set maximum to 100 */

#define CR         0x0d
#define LF         0x0a
#define pi 3.14159265358979323846
void SystemInit() {}
	
unsigned char  charRead;	     		
unsigned char	 ReadString[MAXSIZE]; 		/* Buffer collects chars read from GPS */
unsigned char  Stringtemp[MAXSIZE];
  
unsigned char  Stringlatitude[11];
unsigned char  StringlatitudeCardinal[3];
unsigned char  Stringlongitude[12];
unsigned char  StringlongitudeCardinal[3];

unsigned char  *pChar;
unsigned char  dummyChar;
  

unsigned  char lastCommaPosition;
double latitude;
int	  latitudeDegrees;
double	latitudeMinutes;

double longitude;
int		longitudeDegrees;
double	longitudeMinutes;
unsigned int   j, k;				
unsigned int	 i;		     		//chars read per GPS message string 
unsigned int	 LinesReadNO;        		// Number of GPS stringlines read
double longitude_;
double latitude_;
	

	double parsing(){
	do {
       	
      if(charRead == '$') 
				
			{     
	  i = 0;
	  LinesReadNO++;
	  
	  do {
	     charRead = UART2_Read();
	     if( (charRead != '\0') && (isalnum(charRead) ||  isspace(charRead) || ispunct(charRead)) ) {
		i++;
		ReadString[i] = charRead;
	     }
	  } while(charRead != CR); // which is last info in gps string line

	  
	  // Appending the null terminator to the string read 
	  ReadString[i+1] = '\0';

	  // analyze the message to know whther its $GPGGA or not
	  j = 0;
	  pChar = ReadString;
	  while(*(pChar+j) != COMMA) {
	       Stringtemp[j] = *(pChar+j);
	       j++;
	  }
	  Stringtemp[j] = '\0';

	  if(Stringtemp[3] == 'G' && Stringtemp[4] == 'G' && Stringtemp[5] == 'A') {
	     
	      pChar = ReadString;

	      //Now we'll get latitude
	      pChar = ReadString;
	      j = lastCommaPosition + 1;
	      k = 0;
	      while(*(pChar+j) != COMMA) {
		   Stringlatitude[k] = *(pChar+j);
		   j++;
		   k++;
	      }
	      lastCommaPosition = j;
	      Stringlatitude[k] = '\0';

	      sscanf( Stringlatitude , "%lf", &latitude);
	      latitudeDegrees = (int)(latitude/100);
	      latitudeMinutes = (double)(latitude - latitudeDegrees*100);
				latitude_ = latitudeDegrees + (latitudeMinutes/60);
	      return latitude;

	      // Get lattitude Cardinal direction 
	      pChar = ReadString;
	      j = lastCommaPosition + 1;
	      k = 0;
	      while(*(pChar+j) != COMMA) {
		   StringlatitudeCardinal[k] = *(pChar+j);
		   j++;
		   k++;
	      }
	      lastCommaPosition = j;
	      StringlatitudeCardinal[k] = '\0';
	      printf(" %s", StringlatitudeCardinal);


	
}
int main(){
	UART0_INIT();
        UART2_INIT();
        delayMilli(5);
        init();
        delayMilli(5);
        lcdInit();
        delayMilli(3);
        lcdCommands(0x01);
        delayMilli(1);
 
}
